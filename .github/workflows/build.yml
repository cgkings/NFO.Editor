name: Build NFO.Editor

on:
  push:
    tags:
      - 'v*.*.*'  # 仅在创建符合格式 v9.0.0 的标签时触发
  workflow_dispatch:  # 允许手动触发构建

jobs:
  build:
    runs-on: windows-latest  # 只在 Windows 上构建

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python 版本
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.2'

    - name: 缓存 pip 依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
        key: windows-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          windows-pip-

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

      - name: 设置构建名称
      id: set_build_name
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "push" -and $env:GITHUB_REF -match '^refs/tags/v.*') {
          $BUILD_NAME = $env:GITHUB_REF.Substring(10)  # 去掉 "refs/tags/"
        } else {
          $BUILD_NAME = "build-" + (Get-Date -Format "yyyy-MM-dd-HH-mm-ss")
        }
        echo "BUILD_NAME=$BUILD_NAME" >> $env:GITHUB_ENV

    - name: 运行 PyInstaller
      run: |
        pyinstaller --name "NFO.Editor" --onefile --noconsole --icon="chuizi.ico" --add-data "Img;Img" "NFO.Editor.py"

    - name: 列出 dist 目录
      run: |
        dir dist  # 列出 dist 目录下的文件，帮助确认可执行文件

    - name: 重命名构建产物
      run: |
        ORIGINAL_NAME="dist/${{ env.BUILD_NAME }}.exe"
        NEW_NAME="${{ env.BUILD_NAME }}.exe"
        echo "原始名称: $ORIGINAL_NAME"
        echo "新名称: $NEW_NAME"

        if [ -f "${ORIGINAL_NAME}" ]; then
          mv "${ORIGINAL_NAME}" "${NEW_NAME}"
        else
          echo "错误: 构建产物 ${ORIGINAL_NAME} 不存在。"
          exit 1
        fi

    - name: 打包构建产物
      uses: actions/upload-artifact@v3
      with:
        name: NFO.Editor-build-windows
        path: |
          dist/${{ env.BUILD_NAME }}.*